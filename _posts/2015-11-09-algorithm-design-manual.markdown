---
layout: post
title:  "draft:アルゴリズム設計マニュアル"
date:   2015-11-09 22:00:00
categories: 
---

# draft:アルゴリズム設計マニュアル

アルゴリズムとデータ構造のとてもよい教科書。
読み返すついでにメモを残してみる。

## 第1章 アルゴリズム設計への導入
- 良いアルゴリズムの3つの望ましい性質: 正しく、効率的で、容易に実装できること
- アルゴリズムが常に正しい答えを出力するのに対し、ヒューリスティックは正しい動作をする保証がない。
  - 例: 巡回セールスマン問題: 全探索(n!)アルゴリズムは正しいが極めて遅く、最近接点や最近接ペアヒューリステックは明らかな弱点がある
  - 例: 映画撮影スケジューリング問題: 最初に終わる仕事を選択するというよいアルゴリズムが存在。撮影区間に切れ目がある場合にはよいアルゴリズムはない。
- アルゴリズムには正しさの論証が必要
- アルゴリズムの表現: アイディアを表現した自然言語、疑似コード、プログラムコード。明確にアイディアを表現することが大切。
- 問題の記述: (1) 許される入力例の集合、 (2) アルゴリズムの出力に要求される性質
- 反例はアルゴリズムの誤りを示す強力な方法。不必要な詳細を拭い去った単純な反例がよい。
  - 反例の探し方: 小さく考える、網羅的に考える、弱点を探す、同点(タイ)を作る、極端なものを探す
- アルゴリズムの証明には数学的帰納法がよく使われる
- アルゴリズムを実問題に応用するためには応用問題を抽象的なデータ構造に変換することが大切
  - データ構造: 順列、部分集合、木、グラフ、点や点集合、多角形、文字列
- 再帰的な思考が大切。上記のデータ構造はいずれも一部を取ると同じ種類のデータ構造が得られる再帰的なデータ構造であることに留意せよ。

## 第2章 アルゴリズム解析
- 計算量: 最悪計算量、最良計算量、平均計算量
  - 本にはないが償却計算量というのものある。平均計算量は独立施行、償却計算量は同一系列での連続施行。平均の意味合いは不明確で、最悪を考えるのが有益。
- ビッグオー記法: f(n)=O(g(n))とは、c*g(n)がf(n)の上界であることを示す。Ω(・)は下界、Θ(・)はO(・)かつΩ(・)であることを表す。
  - おもな計算時間のクラス: O(1), O(log(n)), O(n), O(n*log(n)), O(n^2), O(2^n), O(n!)
- 計算量の事例: 挿入ソート、選択ソート、行列の積
- 対数の概念は重要。
  - **二分探索はアルゴリズム設計における最も強力なアイディアの一つ**。
  - 平衡二分木(またはn分木)の高さは葉の数やノードの数のlog。
  - n通りのビットパターンを表せる最小のビット数はlog(n)。
  - a^nの高速な再帰的計算

## 第3章 データ構造
- データ構造の選択は臓器移植なみに効く。
- データ構造の大別
  - 連続 (contiguous) 構造: 配列、行列、ヒープ、ハッシュテーブル
  - 連結 (linked) 構造: リスト、木、グラフの隣接リスト表現
- 配列
  - 長所: 定数時間アクセス、領域の効率、メモリの局所性
  - 短所: サイズ固定。動的配列(領域が足りなくなったら倍々に拡張)で解決できる。動的配列へのアクセスは最悪時定数時間ではなくなるが、償却(amorized)定数時間。
- 連結リスト
  - 長所: オーバーフローが起こらない、挿入と削除は配列より簡単、レコードサイズが大きいときポインタ操作のほうが効率的
  - 短所: ポインタ格納に余分な領域が必要、ランダムアクセスに弱い、キャッシュが効きにくい
- コンテナ: データアイテムを、その内容と無関係に保管したり取り出したりできるデータ構造。
  - スタック: push, popメソッドを備える。LIFO。
  - キュー: enqueue, dequeuqメソッドを備える。FIFO、最悪待ち時間の最小化。
  - 辞書(dictionary): KVS。search, insert, deleteメソッドを備える。さらに、 max, min, predecessor, successorを備える場合もある。


# (コーディング面接を想定した)問題集

以下の問題について、(1)自然言語と図、(2)疑似コード、(3)コード、(4)最悪計算量と平均計算量、を答えよ。

- p.3 挿入ソート
- (p.12 映画撮影スケジューリング問題の最適スケジューリング)
- p.47 選択ソート
- p.49 愚直な文字列パターンマッチング
- (p.75 動的配列)
- p.76 単方向連結リストの実装と探索、挿入、削除
- (p.80 スタックの実装、pushとpop演算)
- (p.80 キューの実装、enqueueとdequeue演算)